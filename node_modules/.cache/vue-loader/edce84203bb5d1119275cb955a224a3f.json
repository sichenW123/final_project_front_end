{"remainingRequest":"/Users/sichenwang/Desktop/cs6200-project/goal_search/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sichenwang/Desktop/cs6200-project/goal_search/src/views/SinglePage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sichenwang/Desktop/cs6200-project/goal_search/src/views/SinglePage.vue","mtime":1586996696546},{"path":"/Users/sichenwang/Desktop/cs6200-project/goal_search/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sichenwang/Desktop/cs6200-project/goal_search/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sichenwang/Desktop/cs6200-project/goal_search/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sichenwang/Desktop/cs6200-project/goal_search/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCgpleHBvcnQgZGVmYXVsdHsKICAgIG5hbWU6IlNpbmdsZVBhZ2UiLAogICAgY29tcG9uZW50czp7fSwKICAgIG1ldGhvZHM6ewogICAgICAgIAogICAgICAgIAogICAgfSwKICAgIGRhdGEoKXsKICAgICAgICBjb25zdCBwYXRoPXdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcvJykKICAgICAgICBjb25zdCBtb3ZpZUlkPXBhdGhbNV0KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICByZXR1cm57CiAgICAgICAgICAgIG1vdmllSWQ6IG1vdmllSWQsCiAgICAgICAgICAgIG1vdmllOiIiLAogICAgICAgIH0KICAgIH0sCiAgICBjcmVhdGVkKCl7CiAgICAgICAgZmV0Y2goYGh0dHA6Ly93d3cub21kYmFwaS5jb20vP2k9JHt0aGlzLm1vdmllSWR9JmFwaWtleT04NWViZmRmZmApCiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlPT5yZXNwb25zZS5qc29uKCkpCiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlPT50aGlzLm1vdmllPXJlc3BvbnNlKQogICAgfQogICAgCn0KCg=="},{"version":3,"sources":["SinglePage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"SinglePage.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"container\">\n        \n        <h1>{{this.movie.Title}}  ({{this.movie.Year}})</h1>\n       \n            <div class=\"float-right col-4\">\n                <h4> {{this.movie.Genre}}</h4>\n            </div>\n            <br>\n            <br>\n            <br>\n            <br>\n            <br>\n        <div class=\"row\">\n            <div class=\"col-4\">\n                <img :src=\"this.movie.Poster\" >\n            </div>\n            <div class=\"col-3\">\n                <h5> Director: {{this.movie.Director}}</h5>\n                <h5> Writer: {{this.movie.Writer}}</h5>\n                <h5> Actors: {{this.movie.Actors}}</h5>\n                <h5> Released at: {{this.movie.Released}}</h5>\n                <h5> Country: {{this.movie.Country}}</h5>\n                <h5> Language: {{this.movie.Language}}</h5>\n                <h5> Runtime: {{this.movie.Runtime}}</h5>\n                <a :href=\"'https://www.imdb.com/title/'+this.movie.imdbID+''\"> IMDB ID: {{this.movie.imdbID}}</a>\n            </div>\n            <div class=\"col-2\">\n                \n            </div>\n            <div class=\"col-2\">\n                <h3>Ratings</h3>\n                <br>\n                <ul class=\"list-group-flush\" v-bind:key=\"rating.Source\" v-for=\"rating in this.movie.Ratings\">\n                    <li class=\"list-group-item\">\n                        {{rating.Source}} {{rating.Value}}\n                    </li>\n                </ul>\n            </div>\n            \n        </div>\n        <div class=\"row\">\n            <div class=\"col-8\">\n                <h3>Plot</h3>\n                <p>{{this.movie.Plot}}</p>\n            </div>\n        </div>\n        \n        \n       \n    </div>\n</template>\n\n<script>\n\nexport default{\n    name:\"SinglePage\",\n    components:{},\n    methods:{\n        \n        \n    },\n    data(){\n        const path=window.location.href.split('/')\n        const movieId=path[5]\n        \n        \n        \n        return{\n            movieId: movieId,\n            movie:\"\",\n        }\n    },\n    created(){\n        fetch(`http://www.omdbapi.com/?i=${this.movieId}&apikey=85ebfdff`)\n            .then(response=>response.json())\n            .then(response=>this.movie=response)\n    }\n    \n}\n\n</script>\n\n\n<style scoped>\n\n</style>"]}]}